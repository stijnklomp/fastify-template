x-playwright: &playwright
  image: mcr.microsoft.com/playwright:v1.46.1-jammy
  volumes:
    - ".:/src"
  working_dir: "/src"
  tty: true
  depends_on:
    rabbitmq:
      condition: service_healthy
    redis:
      condition: service_started
    db-migration:
      condition: service_completed_successfully
  # networks:
  #   - internal
  #   - external
  env_file:
    - path: ./.env
  ports:
    - 3001:3001

x-fastify: &fastify
  network_mode: "host"
  tty: true
  # healthcheck:
  #   test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
  #   interval: 30s
  #   timeout: 5s
  #   retries: 4
  depends_on:
    rabbitmq:
      condition: service_healthy
    redis:
      condition: service_started
    db-migration:
      condition: service_completed_successfully
  # networks:
  #   - internal
  #   - external
  env_file:
    - path: ./.env
  ports:
    - ${API_PORT:-3000}:3000

services:
  local:
    <<: *fastify
    # extends:
    #   service: fastify
    build:
      context: .
    profiles:
      - local
      - test

  dev:
    <<: *fastify
    # extends:
    #   service: fastify
    image: node:20-alpine
    volumes:
      - ".:/src"
    working_dir: "/src"
    command: sh -c "[ ! -d node_modules ] && npm ci --force ; apk --no-cache add curl ; npm run dev" # todo: "apk not found" error
    profiles:
      - dev

  integration:
    <<: *playwright
    command: sh -c "[ ! -d node_modules ] && npm ci --force ; apk --no-cache add curl ; sleep infinity"
    profiles:
      - local
      - dev

  integration-once:
    <<: *playwright
    command: sh -c "[ ! -d node_modules ] && npm ci --force ; apk --no-cache add curl ; npm run test:integration"
    profiles:
      - test

  rabbitmq:
    image: rabbitmq
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 5s
      retries: 5
    # networks:
    #   - internal
    volumes:
      - rabbitmq:/var/lib/rabbitmq/data
      - rabbitmq:/var/log/rabbitmq/log
    ports:
      - ${RABBIT_PORT:-5672}:5672
      - 15672:15672

  redis:
    image: redis
    restart: always
    command:
      [
        "redis-server",
        "--save",
        "--appendonly",
        "no",
        "--notify-keyspace-events",
        "Ex",
        "--logLevel",
        "notice",
        "--requirepass",
        "$REDIS_PASSWORD",
      ]
    # networks:
    #   - internal
    volumes:
      - redis-cache:/data
    # logging:
    #   driver: none
    ports:
      - ${REDIS_PORT:-6379}:6379

  db:
    image: postgres
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # networks:
    #   - internal
    healthcheck:
      test: pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER
      interval: 20s
      timeout: 5s
      retries: 6
    environment:
      POSTGRES_USER: $DATABASE_USERNAME
      POSTGRES_PASSWORD: $DATABASE_PASSWORD
      POSTGRES_DB: $DATABASE_DB
    env_file:
      - path: ./.env
    ports:
      - ${DATABASE_PORT:-5432}:5432

  db-migration:
    image: node:20-alpine
    volumes:
      - ".:/src"
    working_dir: "/src"
    command: sh ./dockerComposeMigrate.sh
    depends_on:
      db:
        condition: service_healthy
    tty: true
    ports:
      - 3001:3001
    # networks:
    #   - internal
    env_file:
      - path: ./.env
    profiles:
      - local
      - dev
      - test

  localstack:
    image: localstack/localstack
    ports:
      - "127.0.0.1:4566:4566" # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559" # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

volumes:
  rabbitmq:
  redis-cache:
  postgres-data:
# networks:
#   internal:
#     driver: bridge
#   external:
#     driver: bridge
